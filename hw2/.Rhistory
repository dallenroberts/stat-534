bestRegression <- bestRegression[bestRegression != removedPredictor]
VariablesInModel <- VariablesInModel[VariablesInModel != removedPredictor]
cat("\nbackwardSearch :: Logistic regression with ", stepNumber, " predictors removed :: \nPredictorRemoved: ", removedPredictor, "\nPredictor set: ", bestRegression, "\nBest ", method, ": ", bestRegressionValue, "\n\n\n\n")
} else {
cat("\nbackwardSearch :: Logistic regression with ", stepNumber, " predictors removed did not improve ", method, ":: \n")
break
}
}
return(list(value=bestRegressionValue,reg=bestRegression));
}
#read the data
data <- read.table("534binarydata.txt")
response  <- ncol(data)
lastPredictor <- ncol(data)-1
## Problem 2
#perform a forward "greedy" search for the best logistic regression
#i.e., the logistic regression with the smallest AIC
forwardResultsAIC <- forwardSearch(response,data,lastPredictor, method = "AIC")
## Problem 3
#perform a backward "greedy" search for the best logistic regression
backwardResultsAIC <- backwardSearch(response,data,lastPredictor, method = "AIC");
rm(list = ls())
getLogisticAIC <- function(response, explanatory = NULL, data) {
## Check if the regression has no explanatory variables
if(0 == length(explanatory)) {
## Regression with no explanatory variables
mod <- glm(data[, response] ~ 1,
family = binomial(link = logit))
} else {
## Regression with at least one explanatory variable
mod <- glm(data[, response] ~ as.matrix(data[, as.numeric(explanatory)]),
family = binomial(link = logit))
}
deviance <- mod$deviance
convergence <- mod$converged
## Calculate AIC
return(list("value" = (deviance + 2 * (1 + length(explanatory))),
"converged" = convergence))
}
getLogisticBIC <- function(response, explanatory = NULL, data) {
## Check if the regression has no explanatory variables
if(0 == length(explanatory)) {
## Regression with no explanatory variables
mod <- glm(data[, response] ~ 1,
family = binomial(link = logit))
} else {
## Regression with at least one explanatory variable
mod <- glm(data[, response] ~ as.matrix(data[, as.numeric(explanatory)]),
family = binomial(link = logit))
deviance <- mod$deviance
convergence <- mod$converged
}
## Calculate BIC
return(list("value" = deviance + log(nrow(data))*(1 + length(explanatory)), "converged" = convergence))
}
forwardSearch <- function(response, data, lastPredictor, method) {
stopifnot(method %in% c("AIC", "BIC"))
#Start with the empty regression with no predictors
bestRegression <- NULL
#Calculate the AIC/BIC of the empty regression
if(method == "AIC") {
regOut <- getLogisticAIC(response,bestRegression,data)
} else {
regOut <- getLogisticBIC(response,bestRegression,data)
}
bestRegressionValue <- regOut$value
convergence <- regOut$converged
if(convergence == TRUE) {
cat('\n\n\n\nforwardSearch :: The empty logistic regression has ', method, ' = ', bestRegressionValue,'\n\n\n')
} else {
cat('\n\n\n\nforwardSearch :: The empty logistic regression did not converge')
}
#Vector that keeps track of all the variables that are currently NOT in the model
VariablesNotInModel <- 1:lastPredictor
#Add variables one at a time to the current regression and retain that variable that gives the smallest values of AIC/BIC associated
#Make the model that includes that variable to be the current model if it gives a smaller AIC/BIC than the AIC/BIC of the current regression
#stop when there are no variables that can be included in the model
stepNumber = 0;
while(length(VariablesNotInModel)>=1)
{
#record the number of steps performed
stepNumber <- stepNumber + 1
cat("Step Number: ", stepNumber, "\n")
#create a vector that records the AIC/BIC values of the regressions
#we are examining; the number of these regressions is equal
#with the number of variables that are not in the model
reg <- vector('numeric',length(VariablesNotInModel))
# cat("Variables Not in Model: ", VariablesNotInModel, "\n")
#take each variable that is not in the model and include it in the model
for(ii in 1:length(VariablesNotInModel)) {
# cat("\n", ii, "\n")
addedPred <- VariablesNotInModel[ii]
if(method == "AIC") {
regOut <- getLogisticAIC(response,c(bestRegression, addedPred),data)
} else {
regOut <- getLogisticBIC(response,c(bestRegression, addedPred),data)
}
convergence <- regOut$converged
if(convergence == TRUE) {
reg[ii] <- regOut$value
} else {
reg[ii] <- NA
}
}
# cat("\n", reg, "\n")
if(min(reg, na.rm = TRUE) < bestRegressionValue) {
bestRegressionValue <- min(reg, na.rm = TRUE)
bestPredictor <- VariablesNotInModel[which.min(reg)]
bestRegression <- c(bestRegression, bestPredictor)
VariablesNotInModel <- VariablesNotInModel[VariablesNotInModel != bestPredictor]
cat("\nforwardSearch :: Logistic regression with ", stepNumber, " predictors :: \nPredictorAdded: ", bestPredictor, "\nPredictor set: ", bestRegression, "\nBest ", method, " : ", bestRegressionValue, "\n\n\n\n")
} else {
cat("\nforwardSearch :: Logistic regression with ", stepNumber, " predictors did not improve ", method, ":: \n")
break
}
}
return(list(method = method, value=bestRegressionValue,reg=bestRegression));
}
backwardSearch <- function(response, data, lastPredictor, method) {
stopifnot(method %in% c("AIC", "BIC"))
#Start with the regression with all predictors
bestRegression <- 1:lastPredictor
#Calculate the AIC/BIC of the empty regression
if(method == "AIC") {
regOut <- getLogisticAIC(response,bestRegression,data)
} else {
regOut <- getLogisticBIC(response,bestRegression,data)
}
bestRegressionValue <- regOut$value
convergence <- regOut$converged
if(convergence == TRUE) {
cat('\n\n\n\nbackwardSearch :: The full logistic regression has ', method, ' = ',bestRegressionValue,'\n\n\n')
} else {
cat('\n\n\n\nbackwardSearch :: The full logistic regression did not converge\n\n\n')
}
#Vector that keeps track of all the variables that are currently in the model
VariablesInModel <- 1:lastPredictor
# Subtract variables one at a time from the current regression and identify the variable that, when removed, gives the smallest values of AIC/BIC
#Make the model that subtracts that variable to be the current model if it gives a smaller AIC/BIC than the AIC/BIC of the current regression
#stop when there are no variables that can be removed from the model
stepNumber = 0;
while(length(VariablesInModel)>=1)
{
#record the number of steps performed
stepNumber <- stepNumber + 1
cat("Step Number: ", stepNumber, "\n")
#create a vector that records the AIC/BIC values of the regressions
#we are examining; the number of these regressions is equal
#with the number of variables that are in the model
reg <- vector('numeric',length(VariablesInModel))
conv <- vector('numeric',length(VariablesInModel))
# cat("Variables In Model: ", VariablesInModel, "\n")
#take each variable that is in the model and remove it from the model
for(ii in 1:length(VariablesInModel)) {
toDrop <- VariablesInModel[ii]
newSet <- bestRegression[bestRegression != toDrop]
if(method == "AIC") {
regOut <- getLogisticAIC(response, newSet, data)
} else {
regOut <- getLogisticBIC(response, newSet, data)
}
conv[ii] <- regOut$converged
convergence <- regOut$converged
if(convergence == TRUE) {
reg[ii] <- regOut$value
} else {
reg[ii] <- NA
}
}
cat("\nConvergence: ", conv, "\n")
# cat("\n", reg, "\n")
if(all(is.na(reg))) {
cat("\nbackwardSearch :: No logistic regression models with ", stepNumber, " predictors removed converged. Moving on...\n")
} else if(min(reg, na.rm = TRUE) < bestRegressionValue | is.na(bestRegressionValue)) {
bestRegressionValue <- min(reg, na.rm = TRUE)
removedPredictor <- VariablesInModel[which.min(reg)]
bestRegression <- bestRegression[bestRegression != removedPredictor]
VariablesInModel <- VariablesInModel[VariablesInModel != removedPredictor]
cat("\nbackwardSearch :: Logistic regression with ", stepNumber, " predictors removed :: \nPredictorRemoved: ", removedPredictor, "\nPredictor set: ", bestRegression, "\nBest ", method, ": ", bestRegressionValue, "\n\n\n\n")
} else {
cat("\nbackwardSearch :: Logistic regression with ", stepNumber, " predictors removed did not improve ", method, ":: \n")
break
}
}
return(list(value=bestRegressionValue,reg=bestRegression));
}
#read the data
data <- read.table("534binarydata.txt")
response  <- ncol(data)
lastPredictor <- ncol(data)-1
## Problem 2
## Problem 3
#perform a backward "greedy" search for the best logistic regression
backwardResultsAIC <- backwardSearch(response,data,lastPredictor, method = "AIC");
rm(list = ls())
getLogisticAIC <- function(response, explanatory = NULL, data) {
## Check if the regression has no explanatory variables
if(0 == length(explanatory)) {
## Regression with no explanatory variables
mod <- glm(data[, response] ~ 1,
family = binomial(link = logit))
} else {
## Regression with at least one explanatory variable
mod <- glm(data[, response] ~ as.matrix(data[, as.numeric(explanatory)]),
family = binomial(link = logit))
}
deviance <- mod$deviance
convergence <- mod$converged
## Calculate AIC
return(list("value" = (deviance + 2 * (1 + length(explanatory))),
"converged" = convergence))
}
getLogisticBIC <- function(response, explanatory = NULL, data) {
## Check if the regression has no explanatory variables
if(0 == length(explanatory)) {
## Regression with no explanatory variables
mod <- glm(data[, response] ~ 1,
family = binomial(link = logit))
} else {
## Regression with at least one explanatory variable
mod <- glm(data[, response] ~ as.matrix(data[, as.numeric(explanatory)]),
family = binomial(link = logit))
deviance <- mod$deviance
convergence <- mod$converged
}
## Calculate BIC
return(list("value" = deviance + log(nrow(data))*(1 + length(explanatory)), "converged" = convergence))
}
forwardSearch <- function(response, data, lastPredictor, method) {
stopifnot(method %in% c("AIC", "BIC"))
#Start with the empty regression with no predictors
bestRegression <- NULL
#Calculate the AIC/BIC of the empty regression
if(method == "AIC") {
regOut <- getLogisticAIC(response,bestRegression,data)
} else {
regOut <- getLogisticBIC(response,bestRegression,data)
}
bestRegressionValue <- regOut$value
convergence <- regOut$converged
if(convergence == TRUE) {
cat('\n\n\n\nforwardSearch :: The empty logistic regression has ', method, ' = ', bestRegressionValue,'\n\n\n')
} else {
cat('\n\n\n\nforwardSearch :: The empty logistic regression did not converge')
}
#Vector that keeps track of all the variables that are currently NOT in the model
VariablesNotInModel <- 1:lastPredictor
#Add variables one at a time to the current regression and retain that variable that gives the smallest values of AIC/BIC associated
#Make the model that includes that variable to be the current model if it gives a smaller AIC/BIC than the AIC/BIC of the current regression
#stop when there are no variables that can be included in the model
stepNumber = 0;
while(length(VariablesNotInModel)>=1)
{
#record the number of steps performed
stepNumber <- stepNumber + 1
cat("Step Number: ", stepNumber, "\n")
#create a vector that records the AIC/BIC values of the regressions
#we are examining; the number of these regressions is equal
#with the number of variables that are not in the model
reg <- vector('numeric',length(VariablesNotInModel))
# cat("Variables Not in Model: ", VariablesNotInModel, "\n")
#take each variable that is not in the model and include it in the model
for(ii in 1:length(VariablesNotInModel)) {
# cat("\n", ii, "\n")
addedPred <- VariablesNotInModel[ii]
if(method == "AIC") {
regOut <- getLogisticAIC(response,c(bestRegression, addedPred),data)
} else {
regOut <- getLogisticBIC(response,c(bestRegression, addedPred),data)
}
convergence <- regOut$converged
if(convergence == TRUE) {
reg[ii] <- regOut$value
} else {
reg[ii] <- NA
}
}
# cat("\n", reg, "\n")
if(min(reg, na.rm = TRUE) < bestRegressionValue) {
bestRegressionValue <- min(reg, na.rm = TRUE)
bestPredictor <- VariablesNotInModel[which.min(reg)]
bestRegression <- c(bestRegression, bestPredictor)
VariablesNotInModel <- VariablesNotInModel[VariablesNotInModel != bestPredictor]
cat("\nforwardSearch :: Logistic regression with ", stepNumber, " predictors :: \nPredictorAdded: ", bestPredictor, "\nPredictor set: ", bestRegression, "\nBest ", method, " : ", bestRegressionValue, "\n\n\n\n")
} else {
cat("\nforwardSearch :: Logistic regression with ", stepNumber, " predictors did not improve ", method, ":: \n")
break
}
}
return(list(method = method, value=bestRegressionValue,reg=bestRegression));
}
backwardSearch <- function(response, data, lastPredictor, method) {
stopifnot(method %in% c("AIC", "BIC"))
#Start with the regression with all predictors
bestRegression <- 1:lastPredictor
#Calculate the AIC/BIC of the empty regression
if(method == "AIC") {
regOut <- getLogisticAIC(response,bestRegression,data)
} else {
regOut <- getLogisticBIC(response,bestRegression,data)
}
bestRegressionValue <- regOut$value
convergence <- regOut$converged
if(convergence == TRUE) {
cat('\n\n\n\nbackwardSearch :: The full logistic regression has ', method, ' = ',bestRegressionValue,'\n\n\n')
} else {
cat('\n\n\n\nbackwardSearch :: The full logistic regression did not converge\n\n\n')
}
#Vector that keeps track of all the variables that are currently in the model
VariablesInModel <- 1:lastPredictor
# Subtract variables one at a time from the current regression and identify the variable that, when removed, gives the smallest values of AIC/BIC
#Make the model that subtracts that variable to be the current model if it gives a smaller AIC/BIC than the AIC/BIC of the current regression
#stop when there are no variables that can be removed from the model
stepNumber = 0;
while(length(VariablesInModel)>=1)
{
#record the number of steps performed
stepNumber <- stepNumber + 1
cat("Step Number: ", stepNumber, "\n")
#create a vector that records the AIC/BIC values of the regressions
#we are examining; the number of these regressions is equal
#with the number of variables that are in the model
reg <- vector('numeric',length(VariablesInModel))
conv <- vector('numeric',length(VariablesInModel))
cat("Variables In Model: ", VariablesInModel, "\n")
#take each variable that is in the model and remove it from the model
for(ii in 1:length(VariablesInModel)) {
toDrop <- VariablesInModel[ii]
newSet <- bestRegression[bestRegression != toDrop]
if(method == "AIC") {
regOut <- getLogisticAIC(response, newSet, data)
} else {
regOut <- getLogisticBIC(response, newSet, data)
}
conv[ii] <- regOut$converged
convergence <- regOut$converged
if(convergence == TRUE) {
reg[ii] <- regOut$value
} else {
reg[ii] <- NA
}
}
cat("\nConvergence: ", conv, "\n")
# cat("\n", reg, "\n")
if(all(is.na(reg))) {
cat("\nbackwardSearch :: No logistic regression models with ", stepNumber, " predictors removed converged. Moving on...\n")
} else if(min(reg, na.rm = TRUE) < bestRegressionValue | is.na(bestRegressionValue)) {
bestRegressionValue <- min(reg, na.rm = TRUE)
removedPredictor <- VariablesInModel[which.min(reg)]
bestRegression <- bestRegression[bestRegression != removedPredictor]
VariablesInModel <- VariablesInModel[VariablesInModel != removedPredictor]
cat("\nbackwardSearch :: Logistic regression with ", stepNumber, " predictors removed :: \nPredictorRemoved: ", removedPredictor, "\nPredictor set: ", bestRegression, "\nBest ", method, ": ", bestRegressionValue, "\n\n\n\n")
} else {
cat("\nbackwardSearch :: Logistic regression with ", stepNumber, " predictors removed did not improve ", method, ":: \n")
break
}
}
return(list(value=bestRegressionValue,reg=bestRegression));
}
#read the data
data <- read.table("534binarydata.txt")
response  <- ncol(data)
lastPredictor <- ncol(data)-1
## Problem 2
#perform a forward "greedy" search for the best logistic regression
#i.e., the logistic regression with the smallest AIC
forwardResultsAIC <- forwardSearch(response,data,lastPredictor, method = "AIC")
## Problem 3
#perform a backward "greedy" search for the best logistic regression
backwardResultsAIC <- backwardSearch(response,data,lastPredictor, method = "AIC");
stopifnot(method %in% c("AIC", "BIC"))
#Start with the regression with all predictors
bestRegression <- 1:lastPredictor
#Calculate the AIC/BIC of the empty regression
if(method == "AIC") {
regOut <- getLogisticAIC(response,bestRegression,data)
} else {
regOut <- getLogisticBIC(response,bestRegression,data)
}
bestRegressionValue <- regOut$value
convergence <- regOut$converged
method <- "AIC"
stopifnot(method %in% c("AIC", "BIC"))
#Start with the regression with all predictors
bestRegression <- 1:lastPredictor
#Calculate the AIC/BIC of the empty regression
if(method == "AIC") {
regOut <- getLogisticAIC(response,bestRegression,data)
} else {
regOut <- getLogisticBIC(response,bestRegression,data)
}
bestRegressionValue <- regOut$value
convergence <- regOut$converged
convergence
if(convergence == TRUE) {
cat('\n\n\n\nbackwardSearch :: The full logistic regression has ', method, ' = ',bestRegressionValue,'\n\n\n')
} else {
cat('\n\n\n\nbackwardSearch :: The full logistic regression did not converge\n\n\n')
}
#Vector that keeps track of all the variables that are currently in the model
VariablesInModel <- 1:lastPredictor
#stop when there are no variables that can be removed from the model
stepNumber = 0;
#record the number of steps performed
stepNumber <- stepNumber + 1
cat("Step Number: ", stepNumber, "\n")
#create a vector that records the AIC/BIC values of the regressions
#we are examining; the number of these regressions is equal
#with the number of variables that are in the model
reg <- vector('numeric',length(VariablesInModel))
conv <- vector('numeric',length(VariablesInModel))
cat("Variables In Model: ", VariablesInModel, "\n")
ii <- 1
toDrop <- VariablesInModel[ii]
newSet <- bestRegression[bestRegression != toDrop]
newSet
if(method == "AIC") {
regOut <- getLogisticAIC(response, newSet, data)
} else {
regOut <- getLogisticBIC(response, newSet, data)
}
conv[ii] <- regOut$converged
conv[ii]
regOut$converged
for(ii in 1:length(VariablesInModel)) {
toDrop <- VariablesInModel[ii]
newSet <- bestRegression[bestRegression != toDrop]
if(method == "AIC") {
regOut <- getLogisticAIC(response, newSet, data)
} else {
regOut <- getLogisticBIC(response, newSet, data)
}
conv[ii] <- regOut$converged
convergence <- regOut$converged
if(convergence == TRUE) {
reg[ii] <- regOut$value
} else {
reg[ii] <- NA
}
}
convergence
conv
for(ii in 1:length(VariablesInModel)) {
toDrop <- VariablesInModel[ii]
newSet <- bestRegression[bestRegression != toDrop]
if(method == "AIC") {
regOut <- getLogisticAIC(response, newSet, data)
} else {
regOut <- getLogisticBIC(response, newSet, data)
}
conv[ii] <- regOut$converged
convergence <- 1-regOut$converged
if(convergence == TRUE) {
reg[ii] <- regOut$value
} else {
reg[ii] <- NA
}
}
conv
for(ii in 1:length(VariablesInModel)) {
toDrop <- VariablesInModel[ii]
newSet <- bestRegression[bestRegression != toDrop]
if(method == "AIC") {
regOut <- getLogisticAIC(response, newSet, data)
} else {
regOut <- getLogisticBIC(response, newSet, data)
}
conv[ii] <- 1- regOut$converged
convergence <- regOut$converged
if(convergence == TRUE) {
reg[ii] <- regOut$value
} else {
reg[ii] <- NA
}
}
conv[ii]
conv
?vector
reg <- vector('numeric',length(VariablesInModel))
conv <- vector('logical',length(VariablesInModel))
cat("Variables In Model: ", VariablesInModel, "\n")
#take each variable that is in the model and remove it from the model
for(ii in 1:length(VariablesInModel)) {
toDrop <- VariablesInModel[ii]
newSet <- bestRegression[bestRegression != toDrop]
if(method == "AIC") {
regOut <- getLogisticAIC(response, newSet, data)
} else {
regOut <- getLogisticBIC(response, newSet, data)
}
conv[ii] <- regOut$converged
convergence <- regOut$converged
if(convergence == TRUE) {
reg[ii] <- regOut$value
} else {
reg[ii] <- NA
}
}
cat("\nConvergence: ", conv, "\n")
min(c(1, Inf))
combn(2, 60)
combn(60, 2)
?combn
combn(1:168, 2)
x <- combn(168, 2)
str(x)
head(x)
dim(x)
x[1]
x[[1]]
x[1,]
?break
