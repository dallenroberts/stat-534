mod4 <- lm(y ~ x1 + x2, data = dat4)
summary(mod4)
## Regression Tree
tree4 <- tree(y ~ ., data = dat4)
cv_tree4 <- cv.tree(tree4)
plot(cv_tree4$size, cv_tree4$dev, type='b',
xlab = "Number of nodes",
ylab = "Deviance")
?prune.tree
prune.tree(tree4, best = 3)
plot(prune.tree(tree4, best = 3))
plot(prune.tree(tree4, method = "deviance"))
plot(prune.tree(tree4))
tree4_pruned <- prune.tree(tree4, best = 3)
ggplot(data = dat4, aes(x = x1, y = x2)) +
geom_point(aes(colour = y)) +
scale_color_gradient(name = "Y") +
gg.partition.tree(tree4_pruned) +
labs(x = "X1", y = "X2")
?with
dat4_1000 <- data.frame("x1" = rnorm(1000), "x2" = rnorm(1000))
dat4_1000$y <- with(dat4_1000, 2 + 3*(x1 < 0) + 0.5*(x1 >= 0 & x2 < 0.5) - 2*(x1 >= 0 & x2 >= 0.5) + err)
head(dat4)
dat4_1000 <- data.frame("x1" = rnorm(1000), "x2" = rnorm(1000))
err_1000 <- rnorm(1000)
dat4_1000$y <- with(dat4_1000, 2 + 3*(x1 < 0) + 0.5*(x1 >= 0 & x2 < 0.5) - 2*(x1 >= 0 & x2 >= 0.5) + err_1000)
mod4_mse <- sum((dat4_1000$y - predict(mod4, newdata = dat4_1000))^2)
tree4_mse <- sum((dat4_1000$y - predict(tree4, newdata = dat4_1000))^2)
Using 1000 new observations, the mean squared test error for the linear regression model is `r round(mod4_mse, 2)`. This is much lower than the mean squared test error for the regression tree model (`r round(tree4_mse, 2)`). As expected, the linear model is a better fit to data in which the underlying process is expressed via a linear model.
mod4_mse
tree4_mse
rm(list = ls())
library(e1071)
library(ggplot2)
set.seed(10)
train_data <- data.frame(X1 = rnorm(n = 100), X2 = rnorm(n = 100))
train_data$y <- ifelse(train_data$X1^2 + 4*train_data$X2^2 < 0.5, 1, -1)
train_data$y <- factor(train_data$y)
test_data <- data.frame(X1 = rnorm(n = 100), X2 = rnorm(n = 100))
test_data$y <- ifelse(test_data$X1^2 + 4*test_data$X2^2 < 0.5, 1, -1)
test_data$y <- factor(test_data$y)
ggplot(data = train_data, aes(x = X2, y = X1)) +
geom_point(aes(colour = y)) +
ggtitle("Training Data")
## Support Vector Classifier
svc_tune <- tune(svm, y ~ ., data = train_data, kernel = "linear", ranges = list(cost=c(0.001, 0.01, 0.1, 1,5,10,100, 1000)))
plot(svc_tune$best.model, data = train_data)
## Polynomial
poly_tune <- tune(svm, y ~ ., data = train_data, kernel = "polynomial", degree = 3, ranges = list(cost=c(0.001, 0.01, 0.1, 1,5,10,100, 1000)))
plot(poly_tune$best.model, data = train_data)
## Radial fit
radial_tune <- tune(svm, y~., data = train_data, kernel = "radial", ranges = list(cost=c(0.001, 0.01, 0.1, 1,5,10,100, 1000)))
plot(radial_tune$best.model, data = train_data)
## Training error
train_error <- data.frame("Kernel" = c("Linear", "Polynomial", "Radial"))
train_error[train_error$Kernel == "Linear", "Training Error"] <-
sum(predict(svc_tune$best.model) != train_data$y)/nrow(train_data)
train_error[train_error$Kernel == "Polynomial", "Training Error"] <-
sum(predict(poly_tune$best.model) != train_data$y)/nrow(train_data)
train_error[train_error$Kernel == "Radial", "Training Error"] <-
sum(predict(radial_tune$best.model) != train_data$y)/nrow(train_data)
## Test error
test_error <- data.frame("Kernel" = c("Linear", "Polynomial", "Radial"))
test_error[test_error$Kernel == "Linear", "Test Error"] <-
sum(predict(svc_tune$best.model, newdata = test_data) != test_data$y)/nrow(test_data)
test_error[test_error$Kernel == "Polynomial", "Test Error"] <-
sum(predict(poly_tune$best.model, newdata = test_data) != test_data$y)/nrow(test_data)
test_error[test_error$Kernel == "Radial", "Test Error"] <-
sum(predict(radial_tune$best.model, newdata = test_data) != test_data$y)/nrow(test_data)
print(train_error)
print(test_error)
rm(list = ls())
library(e1071)
library(ggplot2)
set.seed(10)
train_data <- data.frame(X1 = rnorm(n = 100), X2 = rnorm(n = 100))
train_data$y <- ifelse(train_data$X1^2 + 4*train_data$X2^2 < 0.5, 1, -1)
train_data$y <- factor(train_data$y)
test_data <- data.frame(X1 = rnorm(n = 100), X2 = rnorm(n = 100))
test_data$y <- ifelse(test_data$X1^2 + 4*test_data$X2^2 < 0.5, 1, -1)
test_data$y <- factor(test_data$y)
ggplot(data = train_data, aes(x = X2, y = X1)) +
geom_point(aes(colour = y)) +
ggtitle("Training Data")
## Support Vector Classifier
svc_tune <- tune(svm, y ~ ., data = train_data, kernel = "linear", ranges = list(cost=c(0.001, 0.01, 0.1, 1,5,10,100, 1000)))
plot(svc_tune$best.model, data = train_data)
## Polynomial
poly_tune <- tune(svm, y ~ ., data = train_data, kernel = "polynomial", degree = 2, ranges = list(cost=c(0.001, 0.01, 0.1, 1,5,10,100, 1000)))
plot(poly_tune$best.model, data = train_data)
## Radial fit
radial_tune <- tune(svm, y~., data = train_data, kernel = "radial", ranges = list(cost=c(0.001, 0.01, 0.1, 1,5,10,100, 1000)))
plot(radial_tune$best.model, data = train_data)
## Training error
train_error <- data.frame("Kernel" = c("Linear", "Polynomial", "Radial"))
train_error[train_error$Kernel == "Linear", "Training Error"] <-
sum(predict(svc_tune$best.model) != train_data$y)/nrow(train_data)
train_error[train_error$Kernel == "Polynomial", "Training Error"] <-
sum(predict(poly_tune$best.model) != train_data$y)/nrow(train_data)
train_error[train_error$Kernel == "Radial", "Training Error"] <-
sum(predict(radial_tune$best.model) != train_data$y)/nrow(train_data)
## Test error
test_error <- data.frame("Kernel" = c("Linear", "Polynomial", "Radial"))
test_error[test_error$Kernel == "Linear", "Test Error"] <-
sum(predict(svc_tune$best.model, newdata = test_data) != test_data$y)/nrow(test_data)
test_error[test_error$Kernel == "Polynomial", "Test Error"] <-
sum(predict(poly_tune$best.model, newdata = test_data) != test_data$y)/nrow(test_data)
test_error[test_error$Kernel == "Radial", "Test Error"] <-
sum(predict(radial_tune$best.model, newdata = test_data) != test_data$y)/nrow(test_data)
print(train_error)
print(test_error)
library(INLA)
install.packages('INLA')
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages('Fields')
install.packages('fields')
install.packages('viridislite')
install.packages('viridisLite')
library(survival)
library(INLA)
inla.setOption(pardiso.license=NULL)
library(knitr)
library(fields)
library(viridisLite)
library(RColorBrewer)
library(survival)
book.plot.field <- function(field, mesh, projector, xlim, ylim,
dims=c(300,300), poly, asp = 1,
axes = FALSE, xlab = '', ylab = '',
col = book.color.c(), ...){
## you can supply field as a matrix vector or like a named list with 'x', 'y' and 'z' as for image
## when field is a vector, it will project it using projector, assuming projector will create a matrix
## when mesh is supplied and projector not, projector will be created and used to project field
if (missing(mesh)) {
if (missing(projector)) {
if (missing(xlim) | missing(ylim)) {
image.plot(field, asp = asp, axes = axes,
xlab = xlab, ylab = ylab, col = col, ...)
} else {
image.plot(field, xlim = xlim, ylim = ylim, asp = asp,
axes = axes, xlab = xlab, ylab = ylab, col = col, ...)
}
} else {
if (missing(xlim)) xlim <- range(projector$x)
if (missing(ylim)) ylim <- range(projector$y)
field.proj <- inla.mesh.project(projector, field)
image.plot(x = projector$x, y = projector$y, z = field.proj,
asp=asp, axes=axes, xlab = xlab, ylab = ylab,
col=col, xlim=xlim, ylim=ylim, ...)
}
} else {
if (missing(xlim)) xlim <- range(mesh$loc[,1])
if (missing(ylim)) ylim <- range(mesh$loc[,2])
projector <- inla.mesh.projector(mesh, xlim = xlim,
ylim = ylim, dims=dims)
field.proj <- inla.mesh.project(projector, field)
image.plot(x = projector$x, y = projector$y, z = field.proj,
asp=asp, axes=axes, xlab = xlab, ylab = ylab, col=col, ...)
}
if (!missing(poly))
plot(poly, add = TRUE, col = 'grey')
}
# Continuous
book.color.c = function(n = 201) {
return(viridis(n))
}
# Continuous (alternative)
book.color.c2 = function(n = 201) {
return(magma(n))
}
source("preamble.r")
data(Leuk)
# Survival time as year
Leuk$time <- Leuk$time / 365
round(sapply(Leuk[, c(1, 2, 5:8)], summary), 2)
loc <- cbind(Leuk$xcoord, Leuk$ycoord)
nwseg <- inla.sp2segment(nwEngland)
plot(nwEngland)
points(loc, pch=19, cex=.5)
COLS <- brewer.pal(3,"Set1")[c(2:1,3)]
km <- survfit(Surv(time, cens) ~ 1, Leuk)
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.5, 0.5, 0), las = 1, mfrow=c(1,2))
plot(km, conf.int = TRUE, col = COLS[3])
km_sex <- survfit(Surv(time, cens) ~ sex, Leuk)
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
head(Leuk)
km_sex <- survfit(Surv(time, cens) ~ sex + age, Leuk)
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
km_sex <- survfit(Surv(time, cens) ~ sex, Leuk)
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
mod_exp_simple <- survreg(Surv(time, cens) ~ sex,
Leuk,dist="exponential")
mod_exp_w_cov <- survreg(Surv(time, cens) ~ sex + wbc + tpi + age,
Leuk,dist="exponential")
summary(mod_exp_simple)
summary(mod_exp_w_cov)
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.5, 0.5, 0), las = 1, mfrow=c(1,2))
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
mtext("No covariates", 3, line=-1)
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
lines(predict(mod_exp_simple, newdata=list(sex = 0),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[1])
lines(predict(mod_exp_simple, newdata=list(sex = 1),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[2])
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
mtext("Some covariates", 3, line=-1)
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
lines(predict(mod_exp_w_cov, newdata=list(sex = 0, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi)),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[1])
km_sex
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.5, 0.5, 0), las = 1, mfrow=c(1,2))
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
mtext("No covariates", 3, line=-1)
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
lines(predict(mod_exp_simple, newdata=list(sex = 0),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[1])
lines(predict(mod_exp_simple, newdata=list(sex = 1),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[2])
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
mtext("Some covariates", 3, line=-1)
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
lines(predict(mod_exp_w_cov, newdata=list(sex = 0, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi), age = mean(Leuk$age)),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[1])
lines(predict(mod_exp_w_cov, newdata=list(sex = 1, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi)), age = mean(Leuk$age),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[2])
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
mtext("Some covariates", 3, line=-1)
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
lines(predict(mod_exp_w_cov, newdata=list(sex = 0, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi), age = mean(Leuk$age)),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[1])
lines(predict(mod_exp_w_cov, newdata=list(sex = 1, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi), age = mean(Leuk$age)),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[2])
mod_wei_simple <- survreg(Surv(time, cens) ~ sex,
Leuk,dist="weibull")
mod_wei_w_cov <- survreg(Surv(time, cens) ~ sex + wbc + tpi + age,
Leuk,dist="weibull")
summary(mod_wei_simple)
summary(mod_wei_w_cov)
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.5, 0.5, 0), las = 1, mfrow=c(1,2))
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
mtext("No covariates", 3, line=-1)
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
lines(predict(mod_wei_simple, newdata=list(sex = 0),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[1])
lines(predict(mod_wei_simple, newdata=list(sex = 1),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[2])
plot(km_sex, conf.int = TRUE, col = COLS[1:2])
mtext("Some covariates", 3, line=-1)
legend('topright', c('female', 'male'), lty = 1, col = COLS,
bty = "n")
lines(predict(mod_wei_w_cov, newdata=list(sex = 0, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi),
age = mean(Leuk$age)),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[1])
lines(predict(mod_wei_w_cov, newdata=list(sex = 1, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi),
age = mean(Leuk$age)),
type = "quantile", p=seq(.001,.999,by=.001)),seq(.999,.001,by=-.001),col=COLS[2])
mod_wei_w_re <- survreg(Surv(time, cens) ~ sex + wbc + tpi + age + frailty(district),
Leuk,dist="weibull")
summary(mod_wei_w_re)
anova(mod_wei_w_cov, mod_wei_w_re)
anova(mod_wei_w_cov, mod_wei_w_re)
mod_cph_wo_re <- coxph(Surv(time, cens) ~ sex + wbc + tpi + age, Leuk)
mod_cph_w_re <- coxph(Surv(time, cens) ~ sex + wbc + tpi + age + frailty(district), Leuk)
summary(mod_cph_wo_re)
summary(mod_cph_w_re)
anova(mod_cph_wo_re,mod_cph_w_re)
anova(mod_cph_wo_re,mod_cph_w_re)
km_female <- survfit(Surv(time, cens) ~ sex, Leuk[which(Leuk$sex == 0),])
km_male <- survfit(Surv(time, cens) ~ sex, Leuk[which(Leuk$sex == 1),])
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.5, 0.5, 0), las = 1, mfrow=c(1,2))
plot(km_female, conf.int = TRUE, col = adjustcolor(COLS[1],alpha=0.25))
lines(survfit(mod_cph_wo_re, newdata=list(sex = 0, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi)), age = mean(Leuk$age)), col = COLS[1],lwd=2)
km_female <- survfit(Surv(time, cens) ~ sex, Leuk[which(Leuk$sex == 0),])
km_male <- survfit(Surv(time, cens) ~ sex, Leuk[which(Leuk$sex == 1),])
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.5, 0.5, 0), las = 1, mfrow=c(1,2))
plot(km_female, conf.int = TRUE, col = adjustcolor(COLS[1],alpha=0.25))
lines(survfit(mod_cph_wo_re, newdata=list(sex = 0, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi), age = mean(Leuk$age))), col = COLS[1],lwd=2)
plot(km_female, conf.int = TRUE, col = adjustcolor(COLS[2],alpha=0.25))
lines(survfit(mod_cph_wo_re, newdata=list(sex = 1, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi)), age = mean(Leuk$age)), col = COLS[2],lwd=2)
plot(km_female, conf.int = TRUE, col = adjustcolor(COLS[2],alpha=0.25))
lines(survfit(mod_cph_wo_re, newdata=list(sex = 1, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi), age = mean(Leuk$age))), col = COLS[2],lwd=2)
km_female <- survfit(Surv(time, cens) ~ sex, Leuk[which(Leuk$sex == 0),])
km_male <- survfit(Surv(time, cens) ~ sex, Leuk[which(Leuk$sex == 1),])
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.5, 0.5, 0), las = 1, mfrow=c(1,2))
plot(km_female, conf.int = TRUE, col = adjustcolor(COLS[1],alpha=0.25))
lines(survfit(mod_cph_wo_re, newdata=list(sex = 0, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi), age = mean(Leuk$age))), col = COLS[1],lwd=2)
plot(km_female, conf.int = TRUE, col = adjustcolor(COLS[2],alpha=0.25))
lines(survfit(mod_cph_wo_re, newdata=list(sex = 1, wbc = mean(Leuk$wbc), tpi = mean(Leuk$tpi), age = mean(Leuk$age))), col = COLS[2],lwd=2)
loc <- cbind(Leuk$xcoord, Leuk$ycoord)
nwseg <- inla.sp2segment(nwEngland)
bnd1 <- inla.nonconvex.hull(nwseg$loc, 0.03, 0.1, resol = 50)
bnd2 <- inla.nonconvex.hull(nwseg$loc, 0.25)
mesh <- inla.mesh.2d(loc, boundary = list(bnd1, bnd2),
max.edge = c(0.05, 0.2), cutoff = 0.02)
## ----proj----------------------------------------------------------------
A <- inla.spde.make.A(mesh, loc)
## ----spde----------------------------------------------------------------
spde <- inla.spde2.pcmatern(mesh = mesh,
prior.range = c(0.05, 0.01), # P(range < 0.05) = 0.01
prior.sigma = c(1, 0.01)) # P(sigma > 1) = 0.01
## ----form0---------------------------------------------------------------
form0 <- inla.surv(time, cens) ~ 0 + a0 + sex + wbc + tpi + age
## ----form----------------------------------------------------------------
form <- update(form0, . ~ . + f(spatial, model = spde))
## ----stack---------------------------------------------------------------
stk <- inla.stack(
data = list(time = Leuk$time, cens = Leuk$cens),
A = list(A, 1),
effect = list(
list(spatial = 1:spde$n.spde),
data.frame(a0 = 1, Leuk[, -c(1:4)])))
r <- inla(
form, family = "weibullsurv", data = inla.stack.data(stk),
control.predictor = list(A = inla.stack.A(stk), compute = TRUE))
## ----fix-----------------------------------------------------------------
round(r$summary.fixed, 4)
## ----hy------------------------------------------------------------------
round(r$summary.hyperpar, 4)
## ----prj-----------------------------------------------------------------
bbnw <- bbox(nwEngland)
r0 <- diff(range(bbnw[1, ])) / diff(range(bbnw[2, ]))
prj <- inla.mesh.projector(mesh, xlim = bbnw[1, ],
ylim = bbnw[2, ], dims = c(200 * r0, 200))
## ----nas-----------------------------------------------------------------
spat.m <- inla.mesh.project(prj, r$summary.random$spatial$mean)
spat.sd <- inla.mesh.project(prj, r$summary.random$spatial$sd)
ov <- over(SpatialPoints(prj$lattice$loc), nwEngland)
spat.sd[is.na(ov)] <- NA
spat.m[is.na(ov)] <- NA
## ----label = "wsmap", echo = FALSE, fig.cap = "Map of the spatial effect for the Weibull survival model. Posterior mean (left) and posterior standard deviation (right)."----
par(mfrow = c(1, 2), mar = c(0, 0, 0, 0))
book.plot.field(list(x = prj$x, y = prj$y, z = spat.m), horizontal = TRUE)
plot(nwEngland, add = TRUE)
book.plot.field(list(x = prj$x, y = prj$y, z = spat.sd), horizontal = TRUE,
col = book.color.c2())
plot(nwEngland, add = TRUE)
head(Leuk)
cph.leuk <- inla.coxph(form0,
data = data.frame(a0 = 1, Leuk[, 1:8]),
control.hazard = list(n.intervals = 25))
## ----coxph0, results = 'hide'--------------------------------------------
cph.res0 <- inla(form0, family = 'coxph',
data = data.frame(a0 = 1, Leuk[, c(1,2, 5:8)]))
## ----adds----------------------------------------------------------------
cph.formula <- update(cph.leuk$formula,
'. ~ . + f(spatial, model = spde)')
## ----Acph----------------------------------------------------------------
cph.A <- inla.spde.make.A(mesh,
loc = cbind(cph.leuk$data$xcoord, cph.leuk$data$ycoord))
## ----stkcph--------------------------------------------------------------
cph.stk <- inla.stack(
data = c(list(E = cph.leuk$E), cph.leuk$data[c('y..coxph')]),
A = list(cph.A, 1),
effects = list(
list(spatial = 1:spde$n.spde),
cph.leuk$data[c('baseline.hazard', 'a0',
'sex', 'wbc', 'tpi')]))
cph.data <- c(inla.stack.data(cph.stk), cph.leuk$data.list)
## ----cphres,results='hide'-----------------------------------------------
cph.res <- inla(cph.formula, family = 'Poisson',
data = cph.data, E = cph.data$E,
control.predictor = list(A = inla.stack.A(cph.stk)))
cph.leuk <- inla.coxph(form0,
data = data.frame(a0 = 1, Leuk[, 1:8]),
control.hazard = list(n.intervals = 25))
## ----coxph0, results = 'hide'--------------------------------------------
cph.res0 <- inla(form0, family = 'coxph',
data = data.frame(a0 = 1, Leuk[, c(1,2, 5:8)]))
## ----adds----------------------------------------------------------------
cph.formula <- update(cph.leuk$formula,
'. ~ . + f(spatial, model = spde)')
## ----Acph----------------------------------------------------------------
cph.A <- inla.spde.make.A(mesh,
loc = cbind(cph.leuk$data$xcoord, cph.leuk$data$ycoord))
## ----stkcph--------------------------------------------------------------
cph.stk <- inla.stack(
data = c(list(E = cph.leuk$E), cph.leuk$data[c('y..coxph')]),
A = list(cph.A, 1),
effects = list(
list(spatial = 1:spde$n.spde),
cph.leuk$data[c('baseline.hazard', 'a0',
'sex', 'wbc', 'tpi', 'age')]))
cph.data <- c(inla.stack.data(cph.stk), cph.leuk$data.list)
## ----cphres,results='hide'-----------------------------------------------
cph.res <- inla(cph.formula, family = 'Poisson',
data = cph.data, E = cph.data$E,
control.predictor = list(A = inla.stack.A(cph.stk)))
## ----compare-------------------------------------------------------------
round(data.frame(surv = coef(summary(mod_cph_wo_re))[, c(1,3)],
r1 = cph.res$summary.fixed[-1, 1:2]), 4)
s.m <- inla.mesh.project(prj, cph.res$summary.random$spatial$mean)
s.sd <- inla.mesh.project(prj, cph.res$summary.random$spatial$sd)
ov <- over(SpatialPoints(prj$lattice$loc), nwEngland)
s.m[is.na(ov)] <- NA
s.sd[is.na(ov)] <- NA
cor(as.vector(spat.m),  as.vector(s.m), use = 'p')
cor(log(as.vector(spat.sd)), log(as.vector(s.sd)), use = 'p')
par(mfrow = c(2, 2), mar = c(0, 0, 0, 0))
book.plot.field(list(x = prj$x, y = prj$y, z = spat.m), horizontal = TRUE)
plot(nwEngland, add = TRUE)
book.plot.field(list(x = prj$x, y = prj$y, z = spat.sd), horizontal = TRUE,
col = book.color.c2())
plot(nwEngland, add = TRUE)
book.plot.field(list(x = prj$x, y = prj$y, z = s.m), horizontal = TRUE)
plot(nwEngland, add = TRUE)
book.plot.field(list(x = prj$x, y = prj$y, z = s.sd), horizontal = TRUE,
col = book.color.c2())
plot(nwEngland, add = TRUE)
getwd()
setwd("Documents/class/biost534/homeworks/hw7/")
list.files()
erdata <- read.table("erdata.txt")
head(erdata)
?cov
cov <- cov(erdata)
cov
list.files()
test <- read.table("covmat.mat")
View(test)
class(cov)
View(cov)
test <- read.table("covmat.mat")
View(cov)
View(test)
test <- read.table("covmat.mat")
View(test)
rm(list = ls())
erdata <- read.table("erdata.txt")
cov <- cov(erdata)
testcov <- read.table("covmat.mat")
test_chol <- read.table("cholesky.mat")
Vuew(test_chol)
View(test_chol)
?chol
chol <- chol(cov)
View(chol)
View(test_chol)
View(cov)
test <- test_chol%*%t(test_chol)
test <- as.matrix(test_cho)l%*%t(as.matrix(test_chol))
test <- as.matrix(test_chol)%*%t(as.matrix(test_chol))
View(test)
test <- chol%*%t(chol)
View(test)
?crossprod
test <- t(chol) %*% chol
View(test)
test2 <- t(as.matrix(chol))%>%as.matrix(chol)
test2 <- t(as.matrix(chol))%*%as.matrix(chol)
View(test2)
set.seed(0)
?rnorm
z <- rnorm(nsamples, mean = 0, sd = 1)
x <- psi%*%z
psi <- chol(cov)
x <- psi%*%z
z <- rnorm(nsamples, mean = 0, sd = 1)
nsamples <- 10
z <- rnorm(nsamples, mean = 0, sd = 1)
x <- psi%*%z
z
dim(z)
x <- psi%*%as.matrix(z)
dim(as.matrix(z))
dim(z)
dim(psi)
z <- rnorm(ncol(cov), mean = 0, sd = 1)
x <- psi%*%z
x
x
x
y <- t(z)%*%psi
y
t(x)
samples <- read.table("samples.txt")
samples <- read.table("samples.txt")
head(samples)
sample_cov <- cov(samples)
View(cov)
View(sample_cov)
samples <- read.table("samples.txt")
sample_cov <- cov(samples)
View(sample_cov)
samples <- read.table("samples.txt")
sample_cov <- cov(samples)
View(sample_cov)
View(test_chol)
View(chol)
View(test_chol)
samples <- read.table("samples.txt")
sample_cov <- cov(samples)
View(sample_cov)
samples <- read.table("samples.txt")
sample_cov <- cov(samples)
View(sample_cov)
samples <- read.table("samples.txt")
sample_cov <- cov(samples)
View(sample_cov)
View(sample_cov - cov)
samples <- read.table("samples.txt")
sample_cov <- cov(samples)
View(cov - sample_cov)
